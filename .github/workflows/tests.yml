name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 custom_components --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 custom_components --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Lint with pylint
      run: |
        pip install pylint
        pylint custom_components --exit-zero
    
    - name: Check with mypy
      run: |
        pip install mypy types-PyYAML
        mypy custom_components --ignore-missing-imports || true
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=custom_components.utility_tariff --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate manifest.json
      run: |
        python -m json.tool custom_components/utility_tariff/manifest.json > /dev/null
        echo "manifest.json is valid JSON"
    
    - name: Check translations
      run: |
        python -m json.tool custom_components/utility_tariff/strings.json > /dev/null
        echo "strings.json is valid JSON"
        
        # Check that all required translation keys exist
        python -c "
        import json
        with open('custom_components/utility_tariff/strings.json') as f:
            strings = json.load(f)
        required = ['config', 'options', 'entity']
        for key in required:
            assert key in strings, f'Missing required key: {key}'
        print('All required translation keys present')
        "
    
    - name: Validate services.yaml
      run: |
        if [ -f "custom_components/utility_tariff/services.yaml" ]; then
          python -c "import yaml; yaml.safe_load(open('custom_components/utility_tariff/services.yaml'))"
          echo "services.yaml is valid YAML"
        else
          echo "No services.yaml file found (OK if no services defined)"
        fi

  hacs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: HACS validation
      uses: hacs/action@main
      with:
        category: integration

  hassfest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Hassfest validation
      uses: home-assistant/actions/hassfest@master