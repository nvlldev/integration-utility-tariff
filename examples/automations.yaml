# Example automations for Xcel Energy Tariff Integration

# Notify when electricity rates change (useful for TOU plans)
- alias: "Electricity Rate Change Notification"
  trigger:
    - platform: state
      entity_id: sensor.xcel_energy_colorado_current_rate
  action:
    - service: notify.persistent_notification
      data:
        title: "Electricity Rate Changed"
        message: >
          Rate changed from {{ trigger.from_state.state }} to {{ trigger.to_state.state }} $/kWh
          {% if trigger.to_state.attributes.current_period is defined %}
          Current period: {{ trigger.to_state.attributes.current_period }}
          {% endif %}

# Start dishwasher during off-peak hours
- alias: "Run Dishwasher Off-Peak"
  trigger:
    - platform: time
      at: "22:00:00"  # 10 PM
  condition:
    - condition: state
      entity_id: binary_sensor.dishwasher_door
      state: "off"  # Door is closed
    - condition: numeric_state
      entity_id: sensor.xcel_energy_colorado_current_rate
      below: 0.10  # Only run if rate is below 10 cents/kWh
  action:
    - service: switch.turn_on
      entity_id: switch.dishwasher

# Reduce AC usage during peak summer hours
- alias: "AC Peak Hour Management"
  trigger:
    - platform: template
      value_template: >
        {{ states('sensor.xcel_energy_colorado_current_rate')|float > 0.15 
           and state_attr('sensor.xcel_energy_colorado_current_rate', 'current_period') == 'peak' }}
  action:
    - service: climate.set_temperature
      target:
        entity_id: climate.main_thermostat
      data:
        temperature: "{{ states('input_number.ac_peak_setpoint')|int }}"
    - service: notify.mobile_app
      data:
        message: "Peak electricity rates active. AC setpoint raised to save money."

# Pre-cool house before peak hours
- alias: "Pre-cool Before Peak"
  trigger:
    - platform: time
      at: "14:00:00"  # 2 PM (1 hour before summer peak)
  condition:
    - condition: time
      weekday: [mon, tue, wed, thu, fri]
    - condition: template
      value_template: "{{ now().month in [5,6,7,8,9,10] }}"  # Summer months
    - condition: numeric_state
      entity_id: sensor.outdoor_temperature
      above: 80
  action:
    - service: climate.set_temperature
      target:
        entity_id: climate.main_thermostat
      data:
        temperature: 72  # Cool house before peak rates

# Track daily electricity cost
- alias: "Calculate Daily Electricity Cost"
  trigger:
    - platform: time
      at: "23:59:00"
  action:
    - service: input_number.set_value
      target:
        entity_id: input_number.daily_electricity_cost
      data:
        value: >
          {% set daily_kwh = states('sensor.daily_energy_consumption')|float %}
          {% set avg_rate = states('sensor.xcel_energy_colorado_current_rate')|float %}
          {% set fixed_daily = states('sensor.xcel_energy_colorado_monthly_service_charge')|float / 30 %}
          {{ (daily_kwh * avg_rate + fixed_daily)|round(2) }}

# Alert high demand for commercial customers
- alias: "Commercial Demand Alert"
  trigger:
    - platform: numeric_state
      entity_id: sensor.current_demand_kw
      above: 50  # Alert if demand exceeds 50 kW
  condition:
    - condition: time
      after: "09:00:00"
      before: "17:00:00"
      weekday: [mon, tue, wed, thu, fri]
  action:
    - service: notify.business_operations
      data:
        title: "High Demand Alert"
        message: >
          Current demand: {{ states('sensor.current_demand_kw') }} kW
          Demand charge rate: {{ states('sensor.xcel_energy_colorado_demand_charge') }} $/kW
          Potential charge: ${{ (states('sensor.current_demand_kw')|float * states('sensor.xcel_energy_colorado_demand_charge')|float)|round(2) }}